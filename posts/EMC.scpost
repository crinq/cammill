function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("EMC post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Modal G-codes and coordinates\n")
   ctrl:AppendText("Comments enclosed with ( and )\n")
   ctrl:AppendText("Incremental IJ\n")
   ctrl:AppendText("uses G43 tool length offsets\n")
end


--  revision 3/6/09
--  Removed line numbers (they can conflict with 0-word subroutines)

--  revision 3/2/07
--  Removed final safety move. This is now done in SheetCam

--   revision 7/10/04
--   Added new arc handling

--   Created 30/3/2005
--   based on Mach2.post

function length(vec)
	return math.sqrt(vec[1] * vec[1] + vec[2] * vec[2] + vec[3] * vec[3])
end

function sscale(vec, s)
	return {vec[1] * s, vec[2] * s, vec[3] * s}
end

function cross(veca, vecb)
	return {veca[2] * vecb[3] - veca[3] * vecb[2], veca[3] * vecb[1] - veca[1] * vecb[3], veca[1] * vecb[2] - veca[2] * vecb[1]}
end

function plus(veca, vecb)
	return {veca[1] + vecb[1], veca[2] + vecb[2], veca[3] + vecb[3]}
end

function minus(veca, vecb)
	return {veca[1] - vecb[1], veca[2] - vecb[2], veca[3] - vecb[3]}
end

function dot(veca, vecb)
	return veca[1] * vecb[1] + veca[2] * vecb[2] + veca[3] * vecb[3]
end

function ang(veca, vecb)
	if length(veca) == 0 or length(vecb) == 0 then
		return 0
	end
	return math.acos(dot(veca, vecb) / length(veca) / length(vecb))
end

function do_move(end_vec, feed)
	post.ModalText("G01")
  post.ModalNumber(" X", end_vec[1], "0.0000")
	post.ModalNumber(" Y", end_vec[2], "0.0000")
	post.ModalNumber(" Z", end_vec[3], "0.0000")
  post.ModalNumber (" F", feed * scale, "0.###")
	post.Eol()
end

function abs_arc(end_vec, mid_vec, cw, feed)
	if cw > 0 then
		post.ModalText("G02")
	else
		post.ModalText("G03")
	end
	post.ModalNumber(" X", end_vec[1], "0.0000")
	post.ModalNumber(" Y", end_vec[2], "0.0000")
	post.ModalNumber(" Z", end_vec[3], "0.0000")
	post.ModalNumber(" I", mid_vec[1], "0.0000")
  post.ModalNumber(" J", mid_vec[2], "0.0000")
  post.ModalNumber (" F", feed * scale, "0.###")
	post.Eol()
end

function doline(start_vec, end_vec, feed, D, d, step, clean)
	local move = minus(end_vec, start_vec)
	local pos = start_vec
	local Zvec = {0, 0, 1}
	local left = cross(Zvec, move)
	local right = cross(move, Zvec)

	--local step = 0.05 -- step
	step = d * step

	local arc_feed = feed -- cut feed
	local move_feed = feed -- advance feed
	local free_feed = feed * 2 -- free move feed

	local real_d = d

	if length(move) == 0 then
		do return end
	end

	if D == d then
		do_move(end_vec, move_feed)
		do return end
	end

	if length(left) == 0 then -- z move
		left = {1, 0, 0}
		right = {-1, 0, 0}
		step = step * 0.3
		arc_feed = arc_feed * 0.5
		move_feed = move_feed * 0.2
		free_feed = arc_feed
		clean = 0
	end

	if clean > 0 then
		d = 1.01 * d
	end

	left = sscale(left, (D - d) / 2 / length(left))
	right = sscale(right, (D - d) / 2 / length(right))
	local vec = sscale(move, step / length(move))



	-- start move
	--post.ModalText("(doline: start move)\n")
	do_move(pos, move_feed)	-- move to center
	abs_arc(plus(pos, right), sscale(right, 0.5), 0, arc_feed / 2) -- clear start circle
	abs_arc(plus(pos, left), left, 0, arc_feed / 2)
	abs_arc(plus(pos, right), right, 0, arc_feed / 2)

	-- move and clear
	--post.ModalText("(doline: cut)\n")
	while length(minus(end_vec, pos)) > length(vec) do
		pos = plus(pos, vec)
		do_move(plus(pos, right), move_feed) -- advance
		abs_arc(plus(pos, left), left, 0, arc_feed) -- cut
		abs_arc(plus(pos, right), right, 0, free_feed) -- go back
	end

	-- end move
	--post.ModalText("(doline: end move)\n")
	pos = end_vec
	do_move(plus(pos, right), move_feed) -- advance
	abs_arc(plus(pos, left), left, 0, arc_feed) -- cut

	if clean > 0 then
		--post.ModalText("(doline: cleanup)\n")
		left = sscale(left, (D - real_d) / 2 / length(left))
		right = sscale(right, (D - real_d) / 2 / length(right))

		do_move(plus(start_vec, left), arc_feed) -- left wall
		abs_arc(plus(start_vec, right), right, 0, arc_feed) -- start arc
		do_move(plus(end_vec, right), arc_feed) -- right wall
		abs_arc(plus(end_vec, left), left, 0, arc_feed) -- end arc
	else
		abs_arc(plus(end_vec, right), right, 0, free_feed) -- go back
	end
	do_move(end_vec, free_feed)	-- move to center
	--post.ModalText("(doline: end)\n")
end

function doarc(start_vec, end_vec, mid_vec, arc_ang, feed, D, d, astep, clean)
	local r = length(minus(mid_vec, end_vec))
	local Xvec = {1, 0, 0}
	local Yvec = {0, 1, 0}
	local Zvec = {0, 0, 1}

  local ccw = 1
  local cw = 0

  if arc_ang > 0 then
    ccw = -ccw
    cw = 1
  end

  if D == d then
    if(arcAngle <0) then
        post.ModalText (" G03")
     else
        post.ModalText (" G02")
     end
     post.NonModalNumber (" X", endX * scale, "0.0000")
     post.NonModalNumber (" Y", endY * scale, "0.0000")
     post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
      post.ModalText (" I")
     post.Number ((arcCentreX - currentX) * scale, "0.0000")
      post.ModalText (" J")
     post.Number ((arcCentreY - currentY) * scale, "0.0000")
     post.ModalNumber (" F", feedRate * scale, "0.0###")
     post.ModalNumber (" S", spindleSpeed, "0.##")
     post.Eol()
    do return end
  end

  if r == 0 then
    do_move(end_vec, feed)
    do return end
  end

  --local astep = 0.05--0.05 -- advance step
	astep = d * astep
	--astep = math.abs(math.asin(astep / r))

  local vec = minus(start_vec, mid_vec)
  local step = cross(Zvec, vec)
  step = sscale(step, astep * ccw / length(step))
  local left = cross(Zvec, step)
  local right = cross(step, Zvec)

	local real_d = d

	if clean > 0 then
		d = 1.01 * d
	end

	local arc_feed = feed -- cut feed
	local move_feed = feed -- advance feed
	local free_feed = feed * 2 -- free move feed

	left = sscale(left, (D - d) / 2 / length(left))
	right = sscale(right, (D - d) / 2 / length(right))

  local pos = start_vec

	-- start move
	post.ModalText("(doarc: start move)\n")
	do_move(pos, move_feed)	-- move to center
	abs_arc(plus(pos, right), sscale(right, 0.5), 0, arc_feed / 2) -- clear start circle
	abs_arc(plus(pos, left), left, 0, arc_feed / 2)
	abs_arc(plus(pos, right), right, 0, arc_feed / 2)
	post.ModalText("(doarc: cut)\n")
  --for i = 0, 1000 do
	while length(minus(end_vec, pos)) > astep do
    post.Text("(doarc: dist:", length(minus(end_vec, pos)), ")\n")
    --print("pos: (", pos[1], "/", pos[2], ") + (", step[1], "/", step[2], ")")
    vec = plus(vec, step)
    vec = sscale(vec, r / length(vec))

    pos = plus(vec, mid_vec)

    step = cross(Zvec, vec)
    step = sscale(step, astep * ccw / length(step))

    left = cross(Zvec, step)
    right = cross(step, Zvec)

    left = sscale(left, (D - d) / 2 / length(left))
    right = sscale(right, (D - d) / 2 / length(right))

		--abs_arc(plus(pos, right), minus(mid_vec, plus(pos, right)), cw, move_feed) -- advance
		-- do_move(pos, move_feed)
		-- do_move(plus(pos, {0, 0, 10}), move_feed)
		-- do_move(pos, move_feed)

		do_move(plus(pos, right), move_feed) -- advance
		abs_arc(plus(pos, left), left, 0, arc_feed) -- cut
		abs_arc(plus(pos, right), right, 0, free_feed) -- go back
	end

	-- end move
	post.ModalText("(doarc: end move)\n")
  pos = end_vec

  vec = minus(pos, mid_vec)
  step = cross(Zvec, vec)
  step = sscale(step, astep * ccw / length(step))

  left = cross(Zvec, step)
  right = cross(step, Zvec)

  left = sscale(left, (D - d) / 2 / length(left))
	right = sscale(right, (D - d) / 2 / length(right))

  do_move(plus(pos, right), move_feed) -- advance
  abs_arc(plus(pos, left), left, 0, arc_feed) -- cut
  abs_arc(plus(pos, right), right, 0, free_feed) -- go back

	--abs_arc(plus(pos, right), minus(mid_vec, plus(pos, right)), cw, move_feed) -- advance
	--do_move(plus(pos, right), move_feed)
	--abs_arc(plus(pos, left), left, 0, arc_feed) -- cut

	-- if clean > 0 then
	-- 	left = minus(mid_vec, start_pos)
	-- 	right = left
	-- 	left = sscale(left, (D - real_d) / 2 / length(left))
	-- 	right = sscale(right, -(D - real_d) / 2 / length(right))
	-- 	abs_arc(plus(start_pos, left), minus(mid_vec, plus(start_pos, left)), 0, arc_feed) -- left wall
	-- 	abs_arc(plus(start_vec, right), right, 0, arc_feed) -- start arc
	-- 	left = minus(mid_vec, end_pos)
	-- 	right = left
	-- 	left = sscale(left, (D - real_d) / 2 / length(left))
	-- 	right = sscale(right, -(D - real_d) / 2 / length(right))
	-- 	abs_arc(plus(end_pos, right), minus(mid_vec, plus(end_pos, right)), 0, arc_feed) -- right wall
	-- 	abs_arc(plus(end_vec, left), left, 0, arc_feed) -- end arc
	-- else
	 	--abs_arc(plus(end_vec, right), right, 0, free_feed) -- go back
	-- end
	--do_move(end_vec, move_feed)
	--do_move(plus(end_vec, {0, 0, 30}), move_feed)
	do_move(end_vec, free_feed)	-- move to center
	post.ModalText("(doarc: end)\n")
end

function OnInit()
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text (" (Filename: ", fileName, ")\n")
   post.Text (" (Post processor: ", postName, ")\n")
   post.Text (" (Date: ", date, ")\n")
   if(scale == metric) then
       post.ModalText (" G21 (Units: Metric)\n") --metric mode
   else
       post.ModalText (" G20 (Units: Inches)\n") --inch mode
   end
    post.ModalText (" G40 G90\n F1\n")
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
    post.ModalText ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
    post.ModalText (" M05 M30\n")
end

function OnRapid()
   post.ModalText (" G00")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
   post.Eol()
end

function OnMove()
	local start_vec = {currentX, currentY, currentZ}
	local end_vec = {endX, endY, endZ}

	local feed = feedRate -- cut feed

	local D = toolDia or 38 -- mill dia
	local d = real_toolDia or 29.8 -- cutter dia
  local step = advance_step or 0.05
	local clean = 0 -- clean edges

	--print("line: (", currentX, "/", currentY, "/", currentZ, ") -> (", endX, "/", endY, "/", endZ, ")")
	doline(start_vec, end_vec, feed, D, d, step, clean)
end

function OnArc()
	local start_vec = {currentX, currentY, currentZ}
	local end_vec = {endX, endY, endZ}
	local mid_vec = {arcCentreX, arcCentreY, endZ}

	local feed = feedRate -- cut feed

  local D = toolDia or 38 -- mill dia
	local d = real_toolDia or 29.8 -- cutter dia
  local step = advance_step or 0.05
	local clean = 0 -- clean edges

	doarc(start_vec, end_vec, mid_vec, arcAngle, feed, D, d, step, clean)
	--print("arc: (", currentX, "/", currentY, "/", currentZ, ") -> (", endX, "/", endY, "/", endZ, ")")

	--doline(start_vec, end_vec, feed, D, d, clean)
end

-- function OnMove()
--    post.ModalText (" G01")
--    post.ModalNumber (" X", endX * scale, "0.0000")
--    post.ModalNumber (" Y", endY * scale, "0.0000")
--    post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
--    post.ModalNumber (" F", feedRate * scale, "0.###")
--    post.ModalNumber (" S", spindleSpeed, "0.##")
--    post.Eol()
-- end
--
--function OnArc()

  --  if(arcAngle <0) then
  --     post.ModalText (" G03")
  --  else
  --     post.ModalText (" G02")
  --  end
  --  post.NonModalNumber (" X", endX * scale, "0.0000")
  --  post.NonModalNumber (" Y", endY * scale, "0.0000")
  --  post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
  --  post.Text (" I")
  --  post.Number ((arcCentreX - currentX) * scale, "0.0000")
  --  post.Text (" J")
  --  post.Number ((arcCentreY - currentY) * scale, "0.0000")
  --  post.ModalNumber (" F", feedRate * scale, "0.0###")
  --  post.ModalNumber (" S", spindleSpeed, "0.##")
  --  post.Eol()
--end


function OnSpindleCW()
    post.ModalText (" M03")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnSpindleCCW()
    post.ModalText (" M04")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnSpindleOff()
    post.ModalText (" M05\n")
end


function OnNewOperation()
   post.Text (" (Operation: ", operationName, ")\n")
   local pRate = plungeRate or 1
   local fRate = feedRate or 1

   if (pRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (fRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnToolChange()
    post.ModalText (" M6 T")
   post.Number (tool, "0")
   post.Text ("  (", toolName, ")\n")
    post.ModalText (" G43 H")
   post.Number (tool, "0")
   post.Eol()
end

function OnSpindleChanged()
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end

function OnNewPart()
   post.Text(" (Part: ",partName,")\n");
end


function OnFloodOn()
    post.ModalText(" M08 (Flood coolant on)\n")
end

function OnMistOn()
    post.ModalText(" M07 (Mist coolant on)\n")
end

function OnCoolantOff()
    post.ModalText(" M09 (Coolant off)\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
      endZ = depth + buffer
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end
